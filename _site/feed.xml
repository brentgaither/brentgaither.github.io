<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Brent Gaither</title>
    <description>Brent Gaither. This is my personal site for some interesting problems I have ran into. 
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 09 Jun 2019 12:00:33 -0600</pubDate>
    <lastBuildDate>Sun, 09 Jun 2019 12:00:33 -0600</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Leadership and building software</title>
        <description>&lt;p&gt;I started writing software at a DNA testing lab. I crafted user stories directly with the lab technicians by spending time with them while they were using the software. I worked with technicians and watched their workflow as the navigated the lab and used the software to track specimens. I was naive in terms of software development and software development practices. I had not heard of agile or waterfall I just knew that I was paid to help the people in the lab. I would walk down to the lab and talk with the lab technicians, take notes and try to understand the problems they were dealing with. Sometimes I just needed to fix a bug, other times I was reworking an entire lab step. I built feedback into every day by iterating with each technician (stakeholder). I didn’t know what I was doing in terms of process, I just knew that I needed to make sure what I was trying to build fit their needs. I have since started to learn more about software development processes and I can now see that I was trying to deliver value as fast as possible to help my “client” by iterating quickly. This was a great way for me to learn what software development is all about.&lt;/p&gt;

&lt;p&gt;I was starting to become a decent engineer, but I did not have to ability to change my software rapidly. I made changes that rippled through the system and caused side effects in parts of the system I could have never predicted. This was partially my fault due to a poor understanding of the design a lack of tests and I was a little bit of a victim of the previous engineers. These issues made me wonder if I was a good engineer. I was learning that the mistakes I was making were easy to avoid with “good” software. So after trying to learn how to write good code on my own, I decided I wanted to join a company that cared about their “code quality”. This was what I started to think was the most important skill - creating software that was beautiful or something…&lt;/p&gt;

&lt;p&gt;I started working at a larger company because I wanted to immerse myself in “real” software development. I felt that the lab I was working in was missing a lot of the practices I needed to learn. The new system I was working on was built in 2006 and had not adapted to the times, it was stuck in a pattern and took a ton of configuration for each client that used it. The application was clunky and difficult to work with, but we had a newer team and this group was ready to do “the rewrite”. We saw that we could make architectural decisions that needed to be made this time. Now that we had all the information we needed from the last 15 years of business.&lt;/p&gt;

&lt;p&gt;The director had built the system from the ground up the first time and we knew how we were going to make it right this time.  We started a new application rewrote some of the backend and even unit tested some of it. Things were moving great until we realized how much about the old system we would have to know to create something that would be a full replacement. The company spent years trying to figure out how to make this new product while still managing to keep the old “pile of junk” alive. The problems that we were trying to solve had been solved years ago just in imperfect ways. They did not have all the information we had now. The trouble was we didn’t know how all of the pieces interacted so we could not recreate the system in our preferred way. This was compounded by a lack of tests that did not enable green to green refactoring. We were often left wondering how module A created a side effect in module F.&lt;/p&gt;

&lt;p&gt;We spent so much time trying to figure out how to rewrite the system we did not keep up with clients needs and even our own needs. Hours and hours were spent configuring the system and manually testing the setups. We could not spend the time to rewrite the application because we had to spend our time fighting the system. When I look back I can see two main reasons we were struggling.&lt;/p&gt;

&lt;p&gt;The first reason we struggled was that we didn’t have any tests around the system. We had to manually test all the changes we made which was so time-consuming we couldn’t risk large changes. Instead, we had to make small code changes and wait for a deploy to get feedback from the whole system. Simple selenium tests could have really helped show this type of regression in the system. Although selenium tests are slow we could have set up tests to ensure the basic health of the system. In addition to a lack of tests, the tests that were written were not effective. This is a huge issue in my experience, people just simply do not know how to write useful tests. Many tests get “in the way” because they are testing implementation details not the behavior of the software. I did not have the know-how and the experience to write solid tests that could help move the system forward.&lt;/p&gt;

&lt;p&gt;Legacy code is only difficult to work with when it needs to be changed. If we were able to separate the new features from the old system we would have been able to use layers of abstraction to incrementally rewrite parts of the system that made sense. This would give us the ability to effectively test new parts of the system with test coverage. I was told that testing the application was impossible to test and not worth the effort, I can now see that it was far from impossible and vital to the success of the company. So instead we looked for a total rewrite which was just too daunting of a task and led to analysis paralysis.&lt;/p&gt;

&lt;p&gt;The next issue was a lack of empowerment from leadership. The engineering director was in charge of managing releases, prioritizing features, writing code and a touch of people management. The director was a great person and was always helpful but he was always busy. I can now look back and see that many of the tasks he was doing could have been taken care of by engineers and product managers if they felt empowered to do so. He had been at the company for 20 years and had been the point of the application for so long he did not let go of those responsibilities that he felt empowered to take at one time.&lt;/p&gt;

&lt;p&gt;Directors are in my opinion are meant to help the organization move forward. To me, that means filling the needs of engineers and pushing them to do what they see is best for the end users of the software. I did not feel a strong connection with the clients’ needs because I could not impact their lives. I was doing the work that was given to me and I had no say in how something worked or why it was supposed to work that way. I was not encouraged to help think through their needs or alternative solutions. My ideas of helping clients could have ranged from putting in place testing frameworks, making process changes or to rework how we configured the system. Each idea was directly related to the work I was doing every day but I felt that I could not “waste time” on these extra activities. Slack time can seem like a waste of time, but when people are given the ability to change something, their interest and desire to contribute increases drastically.&lt;/p&gt;

&lt;p&gt;How does an organization get its engineers to care about the value they are delivering and not how “good” their software is? You have to empower your engineers to be the owners of the product. If leadership is making all the decisions on how the software should be developed what technologies should be used then engineers are left to care about the smallest details of the internals of the code. That is the only thing they have control over. Instead, if leadership is able to point their focus on leveling up the employees, making great hires and empowering people to make the decisions that will drive value your engineers will thrive.&lt;/p&gt;

&lt;h1 id=&quot;what-does-empowerment-look-like-to-me&quot;&gt;What does empowerment look like to me?&lt;/h1&gt;

&lt;p&gt;1) Talk to your employees every day. Make sure you give them an opportunity to express issues. Ask specific questions to give them more chances to talk about uncomfortable topics.&lt;/p&gt;

&lt;p&gt;2) Get your team involved in decisions and invested in the mission. There is no better way to lose your teams’ interest than to decide everything up front.  Agile is about iteration so first off iterate, but second, ensure that your engineers are part of that process. If the iteration only occurs within the software creation, it is not agile.&lt;/p&gt;

&lt;p&gt;3) Help your engineers understand the domain they are working in. Most engineers are not experts in the domain they are working in but they have the ability to understand just enough. Just enough does not make a great experience for the end users.&lt;/p&gt;

&lt;p&gt;4) To become a software company that continually brings value to clients and employees you must provide mentorship leadership and career path changes. This means you have to spend time not writing features to deliver more value. The cost of losing an engineer is larger than getting a few more hours of work out of them.&lt;/p&gt;

&lt;p&gt;5) Give your team leadership opportunities. People want to grow their career and many places do not give you the chance to move up and move around. Many people are forced into a new position to find the growth they want. Keep your team’s domain knowledge and focus on internal growth. You will see a better product.&lt;/p&gt;

&lt;p&gt;6) Mentor younger engineers give them the chance to work closely with senior engineers. Give them the tools to make mistakes safely and grow.&lt;/p&gt;

&lt;p&gt;7) A coaching program is really valuable for younger engineers and more senior engineers can gain experience in leadership.&lt;/p&gt;

&lt;p&gt;8) Understand why you want to use new technology. React, Angular or any front-end framework is only useful if you need frontend validations and feedback. Build with value in mind, not technology. End users do not care about your server-side rendered react if they can’t do their job.&lt;/p&gt;

&lt;p&gt;9) Bring empathy to your everyday. To other engineers, QA, product and the client. It will make a difference in job satisfaction. It’s great being a part of a stress-free place where you can focus on work and not on personal issues. People will follow leadership in this.&lt;/p&gt;

&lt;p&gt;10) You only try with the things you can control. If you feel like you can not impact your clients or your processes you will not care about them. People will look to change what they can, empower them to do what they are good at. Leaders should focus on empowering and do not try to take care of the little things. If you have good people they will do them for you and much more effectively.&lt;/p&gt;

&lt;p&gt;11) “Friday project time” holds an immeasurable value in my opinion. Learning time helps keep engineers longer, learn new skills and use them right away. If you are lucky you might even see engineers build out features in your application during their free time. The features will be built because they see the value and want to deliver it, this is all enhanced by the fact that it is self-motivated.&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Jun 2019 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/2019/06/05/Leadership.html</link>
        <guid isPermaLink="true">http://localhost:4000/2019/06/05/Leadership.html</guid>
        
        
      </item>
    
      <item>
        <title>Duplicate Records in Rails</title>
        <description>&lt;p&gt;Rails provides so many nice features that help you manage your data. One of those features is validates_uniqueness_of
  which is a really cool feature until you realize that it doesn’t always work. This rails article
  https://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_uniqueness_of explains how race conditions
  can allow duplicate records to be inserted with the same values. This is a relatively rare thing to happen but if your site
  starts to have a lot of traffic the chances of these issues start becoming a reality. So how do we fix this issue,
  well they explain that adding a unique index in the database will fix the issue by throwing an &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord::RecordNotUnique&lt;/code&gt;
  exception. This is great but what happens when you already have bad data in your database? How can you fix these issues if
  you can add the index since you have invalid data? Even worse what if you can just go in and update the values. I ran into
  just this issue and here was my solution to getting the database to a valid state to add the index and leave data that
  was already in place.&lt;/p&gt;

&lt;p&gt;The validates_uniqueness_of method can be especially vulnerable to race conditions if the data you are trying to validate
  is in different tables. For example, if you had to ensure that a users pet had a unique name within the household. If you
  set up your data to have an owner table a house table and a pet table. A pet belongs to an owner and an owner a house. If
  you wanted to add a validation that the pet had a unique name in the house you would have to navigate through the owner table
  and then to the house to see if the pet had a unique name. This can cause issues because the reads on multiple tables really increase
  the time for a race condition. To fix this we need to first ensure that all data that must be unique is in the same table
  so we need to add a household id to our pet. This could be seen as an issue since this will denormalize your data since you
  could find a pets house through an owner. If you see this as an issue it is possible to extract this data into a separate
  table and delegate your pets uniqueness constraints to a household pet table. For this example, we are going to allow a little
  denormalization. So first we must add a migration that adds the household_id to the pet.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class AddUniquenessToPet &amp;lt; ActiveRecord::Migration
    def change
      add_column :pets, :household_id, :integer
      add_column :pets, :revision, :integer, default: 0, null: false
    end
  end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we already have bad data we also
  need to add a second column that ensures that the data is unique. We could call this column revision, iteration, variation or
  another name that makes sense for your domain. Once we add these two columns we can run the migration.&lt;/p&gt;

&lt;p&gt;The next step to create unique data is the run a script or “backfiller” to fill in the data that was missing. There will
  need to be two steps to fill the data, one to fill in the data that was missing for the household_id and another to fill
  in the revision. In addition to creating these scripts, we will also need to add some application code that adds the household
  to a pet when they are created. This will ensure that down the road we will always have the data we need to determine if
  the pet is unique.&lt;/p&gt;

&lt;p&gt;Fill in the pets household id with the following script that will go through and set the needed data on the pet table.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   def self.run!
      Pet.
        where(&quot;household_id IS NULL&quot;).
        joins(:owner).
        update_all(&quot;pets.household_id = owner.household_id&quot;)
   end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This next script will go through and find all of the pets that have duplicates. This groups each of the results that
  have more than one pet with the same name. This enables us to identify each of the pets in a house that has the same name.
  After we get all of the pets within the same house with the same name we iterate over them and add a revision to each of
  the pets. So now we can tell if this was Lassy 0 or Lassy 1.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;          result = ActiveRecord::Base.connection.execute(&amp;lt;&amp;lt;-SQL)
            SELECT household_id, name, revision
            FROM `pets`
            GROUP BY household_id, name, revision
            HAVING count(name) &amp;gt; 1
          SQL
          result.each do |household_id, name|
            duplicate_pets = Pet
              .where(name: name)
              .where(household_id: household_id)

             duplicate_pet.each_with_index do |current_pet, index|
              current_pet.update_column(:revision, index)
            end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once this script has been run we have unique rows and we can finally a uniqueness constraint. This is another rails migration
  that can be run once we have deployed the application code and the backfillers.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class PetUniqueness &amp;lt; ActiveRecord::Migration
    def change
      add_index :pets, [:household_id, :name, :revision], :unique =&amp;gt; true
    end
  end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sat, 18 May 2019 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/2019/05/18/Duplicate-Records-Rails.html</link>
        <guid isPermaLink="true">http://localhost:4000/2019/05/18/Duplicate-Records-Rails.html</guid>
        
        
      </item>
    
      <item>
        <title>Sql Filestream</title>
        <description>&lt;h1 id=&quot;how-do-i-store-files&quot;&gt;How do I store files?!&lt;/h1&gt;
&lt;p&gt;You have four main options, you can use a file share (map db rows to a file on a fileshare), a filetable (sql 2012 - store files in a predefined table from sql), a filestream (sql 2008 - varbinary column backed by ntfs), or a store them in the database as a blob or base64 string. Each of the different file storage implementations has its own advantages and disadvantages, I decided to use a filestream because of the file sizes I am dealing with, speed, file integrity and a requirement to send the files over a web api. Setting up a file system is a big task and no matter how you setup your file system there will be considerations.&lt;/p&gt;

&lt;p&gt;I wont get too into the pros and cons of all of the ways to store files, but the main points I want to bring up are file integrity vs ease of use. Blobs and file shares can be easier to implement, but fall short in speed and reliability. Blobs are heavy to store in the database and can add a lot of data and slow down performance. File shares lack integrity which can be a huge problem. A Filestream database can be harder to implement, but guarantees the files you pull from your db are backed by a file. Blobs guarantee that your file is still there, but for files over 1mb filestream greatly out performs blobs.&lt;/p&gt;
&lt;h1 id=&quot;setup-a-filestream-database&quot;&gt;Setup a filestream database&lt;/h1&gt;
&lt;p&gt;To setup a filestream db you need to enable filestream on the server and setup the database to use the filestream.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Go to SQL Server Configuration Manager.&lt;/li&gt;
  &lt;li&gt;If you don’t have sql configuration manager run sqlservermanager11.msc and add the confiuration manager snap-in right-click SQL Server Services, and open.&lt;/li&gt;
  &lt;li&gt;In the SQL Server Configuration Manager snap-in, find  SQL Server instance you are enabling FILESTREAM&lt;/li&gt;
  &lt;li&gt;Right-click and go to Properties.&lt;/li&gt;
  &lt;li&gt;Click the FILESTREAM tab.&lt;/li&gt;
  &lt;li&gt;Check the Enable FILESTREAM for Transact-SQL access check box.&lt;/li&gt;
  &lt;li&gt;If you want to read and write FILESTREAM data from Windows, click Enable FILESTREAM for file I/O streaming access. Enter the name of the Windows share in the Windows Share Name box.&lt;/li&gt;
  &lt;li&gt;If you are setting up a dotnet application to use the filestream you want to check this box.&lt;/li&gt;
  &lt;li&gt;If remote clients must access the FILESTREAM data that is stored on this share, select allow remote clients to have streaming access to FILESTREAM data. If you are running your application with separate users for the db and for the app pool or if you are running the application from multiple web servers and db servers you will need to enable remote access.&lt;/li&gt;
  &lt;li&gt;Hit Apply.
Now you have file stream enabled lets create a database&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE DATABASE FileStreamDb
--You must restart the service once you run this!
EXEC sp_configure filestream_access_level, 2
RECONFIGURE
ALTER DATABASE FileStreamDb
ADD FILEGROUP files CONTAINS FILESTREAM
GO
ALTER DATABASE FileStreamDb
  ADD FILE ( NAME = N'MyFiles',
  FILENAME = N'C:\MyFiles' )  -- where you want to store your files
TO FILEGROUP files
GO
USE [FileStreamDb]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SystemFile](
  [Id] [int] NOT NULL,
  [FileId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
  [FileData] [varbinary](max) FILESTREAM  NOT NULL,
  [MimeType] [varchar](50) NOT NULL,
  [FileName] [varchar](256) NOT NULL,
  [Uploaded] [datetime] NOT NULL,
  PRIMARY KEY CLUSTERED
  (
    [Id] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF,
      IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
      FILESTREAM_ON [files],
  UNIQUE NONCLUSTERED
  (
    [FileId] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF,
      IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON,
      ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ) ON [PRIMARY] FILESTREAM_ON [files]
  GO
  ALTER TABLE [dbo].[SystemFile] ADD  DEFAULT (newsequentialid()) FOR [FileId]
  GO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that you have your database all setup you need to get access to your db files through code. I am not going to go through all of the code since this article does a great job already.
&lt;a href=&quot;https://blog.tallan.com/2011/08/22/using-sqlfilestream-with-c-to-access-sql-server-filestream-data/&quot; target=&quot;_blank&quot;&gt;
https://blog.tallan.com/2011/08/22/using-sqlfilestream-with-c-to-access-sql-server-filestream-data/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main points you need to know are filestreams must use a transaction to stream the data and there is some manual configuration to get the sql filestream to work with the C# streaming.&lt;/p&gt;

&lt;p&gt;If you have files that you want to convert from a fileshare to use a filestream you can use the follow script:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;begin tran
  CREATE TABLE #tmpFolders(myFolderName VARCHAR(max));
   -- Where are your files that you want to convert?
  INSERT INTO #tmpFolders EXEC xp_cmdshell 'dir /B C:\CurrentFiles';
  CREATE TABLE #tmpFiles (myFileName VARCHAR(max));

  declare @folderName varchar(max)
  declare @fileName varchar(max)
  Declare @sql as nvarchar(max)

  -- Iterate through each folder in the directory
  While (Select Count(*) From #tmpFolders where myFolderName is not null) &amp;gt; 0
    Begin
    Select Top 1 @folderName = myFolderName From #tmpFolders
    declare @files table (ID int IDENTITY, FileName varchar(max))
    -- Where are your files that you want to convert?
    declare @currentFolder varchar(256) = 'C:\CurrentFiles'
    declare @fileId int = 0

    -- Go through all of the files in each folder
    declare @fileCommand varchar(256) = 'dir /B ' + @currentFolder + @folderName
    INSERT INTO #tmpFiles execute xp_cmdshell @fileCommand
    While (Select Count(*) From #tmpFiles where myFileName is not null) &amp;gt; 0
      Begin
      Select Top 1 @fileName = myFileName From #tmpFiles
      -- Load the image data and insert into the table
      -- (has to be dynamic you cant use variables in a open row set)
      Set @sql = 'Insert into FileStreamDb.dbo.systemfile
      (fileName, mimeType, uploaded, filedata)
      Select '''+ @fileName + ''',
      ''application/pdf'',
      ''' + cast(getdate() as varchar(256)) + ''',
      BulkColumn from Openrowset(Bulk''' +
      @currentFolder + @folderName + '\' + @fileName + ''', Single_Blob) as tt;
      SELECT @fileId = SCOPE_IDENTITY()
      print @sql
      EXECUTE sp_executesql @sql, N'@fileId INTEGER OUTPUT', @fileId OUTPUT
      -- here is the file id you just created you can use this for
      -- other meta data around the file if you need it
      print @fileId
      Delete from #tmpFiles Where myFileName = @fileName
    End
    truncate table #tmpFiles
    -- OPENROWSET processing goes here, using @folderName to identify which file to use
    Delete from #tmpFolders Where myFolderName = @folderName

  End

  DROP TABLE #tmpFolders
  DROP TABLE #tmpFiles


rollback
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 24 Jul 2018 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/2018/07/24/Filestream.html</link>
        <guid isPermaLink="true">http://localhost:4000/2018/07/24/Filestream.html</guid>
        
        
      </item>
    
      <item>
        <title>Angular and Laravel Authentication</title>
        <description>&lt;p&gt;I have been working on an Angular 6 application and i was struggling to get
all of the authentication setup. I read lots of articles on how to create the entire
OAuth workflow and I landed with the following solution for implicit grants.
First you will need to create a Laravel application, I won’t go too much into
how to create a new application, but basically you need to run create the application ‘laravel new authentication’
add authentication ‘php artisan make:auth’ and finally you can add passport (https://laravel.com/docs/master/passport)
#Install Laravel
Basic installation for passport includes running:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;composer require laravel/passport&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;php artisan migrate&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;php artisan passport:install&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;add Laravel\Passport\HasApiTokens to your user class&lt;/li&gt;
  &lt;li&gt;add Passport::routes to AuthServiceProvider&lt;/li&gt;
  &lt;li&gt;add passport to your auth config&lt;/li&gt;
  &lt;li&gt;install the pre-built passport components with &lt;code class=&quot;highlighter-rouge&quot;&gt;php artisan vendor:publish --tag=passport-components&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make sure you are loading your app js after everything else has loaded so vue
can be fully loaded before you try to load its components (put the script tag for app js
  at the bottom of your layout page)&lt;/p&gt;

&lt;h1 id=&quot;install-angular&quot;&gt;Install Angular&lt;/h1&gt;
&lt;p&gt;For angular you will need to run a few commands to create the application. I put both the Angular
and Laravel app in the same repository since i wanted to keep it all together,
but it depends on how large the project is if you want to keep them together or not.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -g @angular/cli&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ng new my-auth&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd my-auth&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ng serve&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;configure-the-oauth-server&quot;&gt;Configure the OAuth server&lt;/h1&gt;

&lt;p&gt;Now you have a simple Angular application and a basic OAuth server setup with passport.
Now we can actually add some code to add authentication to the Angular app. To do this you will need to
first add a client to passport, you can navigate to the page on the Laravel site you made where you put
the passport components click create new client and add your app name as well as ‘http://localhost:4200/callback’ for the redirect url. If you are going to use a different port for your Angular application or if you are going to server this as a real site you will need to change the redirect to “yoursite/callback”.&lt;/p&gt;

&lt;h1 id=&quot;auth-service&quot;&gt;Auth Service&lt;/h1&gt;

&lt;p&gt;Once you have the client created we can add a service to detect if the user is logged in.
Create a new service named auth that looks like this&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { Injectable, Inject } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { AUTH_CONFIG } from './auth-config';
import { Router } from '@angular/router';
import { HttpClient } from '@angular/common/http';
import { AuthResult } from './authResult.model';

@Injectable()
export class AuthService {

token: any;

// Create a stream of logged in status to communicate throughout app
loggedIn: boolean;
loggedIn$ = new BehaviorSubject&amp;lt;boolean&amp;gt;(this.loggedIn);

constructor(private router: Router, private http: HttpClient) {  }

getToken (): string {
  return localStorage.getItem('access_token');
}

public tryLogin() {
if (!this.isAuthenticated()) {
 // Send the user to the authenticaition server
  location.href = encodeURI(AUTH_CONFIG.AUTHENTICATION_SERVER + '?'
  + 'client_id=' + AUTH_CONFIG.CLIENT_ID
  + '&amp;amp;redirect_uri=' + AUTH_CONFIG.REDIRECT + '&amp;amp;response_type='
  + AUTH_CONFIG.RESPONSE_TYPE);
  }
}


public setSession(urlFragment): void {
  const authResult = this.parseQueryString(urlFragment);
  // Set the time that the Access Token will expire at
  const expiresAt = JSON.stringify((authResult.expires_in * 1000)
  + new Date().getTime());
  localStorage.setItem('access_token', authResult.access_token);
  localStorage.setItem('token_type', authResult.token_type);
  localStorage.setItem('expires_at', expiresAt);
}

public logout(): void {
  // Remove tokens and expiry time from localStorage
  localStorage.removeItem('access_token');
  localStorage.removeItem('id_token');
  localStorage.removeItem('expires_at');
  // Go back to the home route
  this.router.navigate(['/']);
}

public isAuthenticated(): boolean {
  // Check whether the current time is past the
  // Access Token's expiry time
  const expiresAt = JSON.parse(localStorage.getItem('expires_at'));
  return new Date().getTime() &amp;lt; expiresAt;
}

private parseQueryString ( queryString ): AuthResult {
  const params = {};
  let queries, temp, i, l;
  // Split into key/value pairs
  queries = queryString.split('&amp;amp;');
  // Convert the array of strings into an object
  for ( i = 0, l = queries.length; i &amp;lt; l; i++ ) {
    temp = queries[i].split('=');
    params[temp[0]] = temp[1];
  }
  const authResult = new AuthResult();
  authResult.access_token =  params['access_token'];
  authResult.expires_in =  params['expires_in'];
  authResult.token_type =  params['token_type'];
  return authResult;
}
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This service will take care of the sending the user to the OAuth server
checking their token and parsing the token from the server. We need a few more
files to save all of the configurations for the authorization server.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export class AuthResult {
  access_token: string;
  expires_in: number;
  token_type: string;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;interface AuthConfig {
  CLIENT_ID: string;
  REDIRECT: string;
  SCOPE: string;
  RESPONSE_TYPE: string;
  AUTHENTICATION_SERVER: string;
}

export const AUTH_CONFIG: AuthConfig = {
  CLIENT_ID: '1',
  REDIRECT: 'http://localhost:4200/callback',
  SCOPE: '',
  RESPONSE_TYPE: 'token',
  AUTHENTICATION_SERVER: 'http://127.0.0.1:8000/oauth/authorize'
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;callback-component&quot;&gt;Callback component&lt;/h1&gt;
&lt;p&gt;Now that we have a service to handle authentication we need to handle the callback
from the auth server. To do this create a new component (ng g c callback). It is a very simple component that will just
send some data to the auth service and maybe run a spinner while it waits.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { Component, OnInit } from '@angular/core';
import { AuthService } from '../auth/auth.service';
import { ActivatedRoute } from '@angular/router';

@Component({
  selector: 'app-callback',
  templateUrl: './callback.component.html',
  styleUrls: ['./callback.component.css']
})
export class CallbackComponent implements OnInit {

  constructor(private authService: AuthService, private route: ActivatedRoute) { }

  accessToken: string;
  ngOnInit() {
    this.route.fragment.subscribe((fragment: string) =&amp;gt; {
      this.authService.setSession(fragment);
    });
    location.href = '/';
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;home-component&quot;&gt;Home component&lt;/h1&gt;
&lt;p&gt;Lets create a simple component to check and see if the user is logged in (ng g c home)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { Component, OnInit } from '@angular/core';
import { AuthService } from '../auth/auth.service';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})
export class HomeComponent {

  constructor(private authService: AuthService) {}

  public logout(): void {
    this.authService.logout();
  }
  public login(): void {
    this.authService.tryLogin();
  }

  public authenticated(): boolean {
    return this.authService.isAuthenticated();
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now add some html in the home component&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      &amp;lt;button
      *ngIf=&quot;this.authenticated()&quot;
      mat-menu-item
      aria-label=&quot;Logout&quot;
      (click)=&quot;logout()&quot;&amp;gt;
      Log out
    &amp;lt;/button&amp;gt;
    &amp;lt;button
      *ngIf=&quot;!this.authenticated()&quot;
      mat-menu-item
      aria-label=&quot;Login&quot;
      (click)=&quot;login()&quot;&amp;gt;
      Sign in
    &amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;routing&quot;&gt;Routing&lt;/h1&gt;
&lt;p&gt;We will also need to add RouterModule to the app module so the app can use Angular’s routing. Create a simple routing module and import it into your app module.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

import { HomeComponent } from './home/home.component';
import { CallbackComponent } from './callback/callback.component';


const routes: Routes = [
  { path: '', redirectTo: '/home', pathMatch: 'full' },
  { path: 'home', component: HomeComponent, },
  { path: 'callback', component: CallbackComponent, },
];

@NgModule({
  imports: [ RouterModule.forRoot(routes) ],
  exports: [ RouterModule ],
  providers: []
})
export class AppRoutingModule {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;http-interceptor&quot;&gt;Http interceptor&lt;/h1&gt;
&lt;p&gt;Click the sign in button and it should all work! Oh no… “unsupported_grant_type”, looks like something is setup
wrong for the authorization server. If we go to Laravel’s documentation we can see that for implicit flow to work we need to add  Passport::enableImplicitGrant(); to AuthServiceProvider (right after where we registered the passport routes) Now everything should work and we will have an authorization token in local storage. Theres just one more thing. When we send requests to the server from a component we will have to go to the authorization service and add the token in the header. Instead of doing that on each request we can add an http interceptor to our project and let that take care of sending the token on each request.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import {throwError as observableThrowError,  Observable } from 'rxjs';

import {catchError} from 'rxjs/operators';
import { Injectable, Injector } from '@angular/core';
import { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';
import { AuthService } from './auth/auth.service';

@Injectable()
export class MyHttpInterceptor implements HttpInterceptor {
constructor(private authService: AuthService) { }

intercept(req: HttpRequest&amp;lt;any&amp;gt;, next: HttpHandler): Observable&amp;lt;HttpEvent&amp;lt;any&amp;gt;&amp;gt; {

  // Clone the request to add the new header.
  const authReq = req.clone({ headers: req.headers.set('Authorization', 'Bearer ' + this.authService.getToken())});

  // send the newly created request
  return next.handle(authReq).pipe(
      catchError((error, caught) =&amp;gt; {
      // intercept the response error and displace it to the console
      console.log('Error Occurred');
      console.log(error);
      // return the error to the method that called it
      return observableThrowError(error);
  })) as any;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once you add the class MyHttpInterceptor you need to add it to your providers in app module and it will send the header Authorization with Bearer and an access token on each request!&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
providers: [AuthService,
{
provide: HTTP_INTERCEPTORS,
useClass: MyHttpInterceptor,
multi: true
}],
&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Jun 2018 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/2018/06/23/AngularLaravelAuth.html</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/23/AngularLaravelAuth.html</guid>
        
        
      </item>
    
      <item>
        <title>Laravel - Eloquent subqueries</title>
        <description>&lt;p&gt;Laravel uses eloquent for its database interactions. It has some great features and make queries super easy for the most part. Recently I ran into an issue with creating a subquery in one of my eloquent queries. I was trying to do a common query known as a greatest-n-per-group. Basically you want to get the most recent or largest of a group. To do this it is best to add a subquery on one of the joins to get the largest of that group. There is not functionality built in to do this in eloquent so you have to be a little clever. I was not able to find a solution that i liked to achieve this so i came up with something on my own.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DB::table('users as u')
     -&amp;gt;select(DB::raw('u.id, u.name'))
     -&amp;gt;join('some_interesting_table as s', 's.user_id', 'u.id')
     -&amp;gt;leftJoin('another_intersting_table as a', function($join)
            {
                $join-&amp;gt;on('a.user_id', '=', 'u.id');
                $join-&amp;gt;on('a.id', '=',
                 DB::raw(&quot;(select max(id)
                 from another_intersting_table a2
                  where u.id = a2.user_id)&quot;));
            })
    -&amp;gt;where('u.name', 'like', &quot;%&quot; . $name . &quot;%&quot;)
    -&amp;gt;orderby('u.name');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Wed, 23 Aug 2017 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/2017/08/23/EloquentSubquery.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/23/EloquentSubquery.html</guid>
        
        
      </item>
    
      <item>
        <title>C# Exception handling</title>
        <description>&lt;p&gt;Errors happen in code so we need to deal with them in a way that will not confuse the user and we should give them useful feedback as to what happened. The “yellow screen” can be intimidating for a user especially because it includes the full stack trace. Here is a way to handle errors in an MVC application.&lt;/p&gt;

&lt;p&gt;Lets first take a look at the custom controller we are going to use. This will replace the controller that your controllers inherit from because we want to change how exceptions are handled. This custom controller inherits from controller so we will override the onException method that controller already has. We should make sure that went do not give away too much information to the end user when we show errors. If you want we could change the logging for a special user or role.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class CustomController : Controller
{

    protected override void OnException(ExceptionContext filterContext)
    {
        Exception ex = filterContext.Exception;

        filterContext.ExceptionHandled = true;

        string innerException;
        if ((ex.InnerException) == null)
        {
            innerException = &quot;No inner exception&quot;;
        }
        else
        {
            innerException = ex.InnerException.Message;
        }
        var errorId = ErrorLog.Log(ex); //We should log the errors to a file or a db.
        filterContext.Result = RedirectToAction(&quot;ErrorMessage&quot;, &quot;Error&quot;,
        new { ErrorCode = ex.HResult, ErrorId = errorId});
        base.OnException(filterContext);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Error viewmodel…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    public class ErrorViewModel
    {
        public int ErrorCode { get; set; }
        public int ErrorId { get; set; }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Error controller…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class ErrorController : CustomController
{
    [HttpGet]
    public ActionResult ErrorMessage(ErrorViewModel model)
    {
        return View(model);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Error view…&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@model Your.NameSpace.ErrorViewModel

&amp;lt;h1&amp;gt;Error.&amp;lt;/h1&amp;gt;
@{
if (@Model != null)
{
    &amp;lt;h3&amp;gt;Oh no! Something went wrong. Please report this error to the site admin : @Model.ErrorCode&amp;lt;/h3&amp;gt;
    &amp;lt;h4&amp;gt;ErrorId : @Model.ErrorId&amp;lt;/h4&amp;gt;
}
else
{
    &amp;lt;h3&amp;gt;Excpetion was null&amp;lt;/h3&amp;gt;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using the customController…&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class HomeController : CustomController
{
    public ActionResult Index()
    {
        return View();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 05 Jun 2016 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/2016/06/05/C-ExceptionHandler.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/06/05/C-ExceptionHandler.html</guid>
        
        
      </item>
    
      <item>
        <title>C# Guard</title>
        <description>&lt;p&gt;I have started working more and more in C# creating MVC web applications. I have learned a ton about software in this time and wanted to share some of the tactics I have learned to deal with issues that took more some searching.&lt;/p&gt;

&lt;p&gt;Null references have been called a billion dollar mistake. I learned a pretty slick way to deal with them that is easy to use and consistent. A guard class can be used to ensure the object you are passing into a method does not break functionality.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static class Guard
{

  public static void NotNull&amp;lt;T&amp;gt;(T obj, 
      string message = &quot;Paramter cannot be null&quot;)
  {
      if (!object.ReferenceEquals(null, data)) return;

      throw new ArgumentNullException(null, message);
  }
  public static void NotNullOrEmpty(string checkString, 
      string message = &quot;String parameter can not be null or empty&quot;)
  {
      if (string.IsNullOrEmpty(checkString))
      {
          throw new ArgumentException(message);
      }
      return;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This class is can be used to guard against any object that you want to use in a method. This is really great to be able to throw and error easily by just typing…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Guard
{

  public ActionResult SaveNewOrder(NewOrder order)
  {
      Guard.Notnull(order);

      var createOrder = new CreateOrder();
      createOrder.save(order);
      return View();
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sat, 07 May 2016 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/2016/05/07/C-Guard.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/05/07/C-Guard.html</guid>
        
        
      </item>
    
      <item>
        <title>Needleman-Wunsch Algorithm</title>
        <description>&lt;p&gt;In the last post I explained a very simple way to compare DNA strands. Although this does give us an idea of how similar two sequences are it has some problems. If a deletion or insertion occurs in two places the sequences will not align correctly. If the sequences are similar in some sections but have large insertions or deletions the last program will fail to properly detect how they should align. We can see patterns quickly with small sequences but to be able to anaylze a real genome you need to use computers. We can use a global alignment to align DNA more reliabliy.
A global alignment will try to create the best alignment for the entire length of the DNA sequences. This might not be the best choice though if you believe you have a subsection of your DNA in the strand you are comparing it to. This is best for sequences that represent the whole portion of the same DNA you are look at for example an entire gene in a downy woodpecker and the gene in a red headed woodpecker. Remember though this does not tell us anything about function of the gene just the differences in nucleotides.&lt;/p&gt;

&lt;p&gt;I used the same read in method as last time to get sequences into our program. Next I am going to build a matrix to hold all of the posible ways for the sequences to align. This creates a matrix that has all of the alignments of the DNA strands and creates possible gaps in the sequence. If a gap is created we use a gap score to penalize because this means our sequence does not align as close.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def buildGlobalMatrix(gap, misMatch, match, sequenceOne, sequenceTwo):
matrix = [[0 for col in range(len(sequenceTwo)+1)] 
  for row in range(len(sequenceOne)+1)]
  rowLength = len(sequenceOne)
  colLength = len(sequenceTwo)
  for i in range(1,rowLength+1): 
      matrix[i][0] = matrix[i-1][0]+int(gap)
      for j in range(1,colLength+1):
          matrix [0][j] = matrix[0][j - 1] + int(gap) 
          if (sequenceOne[i-1] == sequenceTwo[j - 1]):
              score1 = matrix[i - 1][j - 1] + int(match)
          else:
              score1 = matrix[i - 1][j - 1] + int(misMatch)
          score2 = matrix[i][j - 1] + int(gap)
          score3 = matrix[i - 1][j] + int(gap)
          matrix[i][j] = max(score1, score2, score3)

  return matrix
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This next method is a bit hefty… To align the sequences we take in the matrix we just created then uses the gap score to see where gaps were placed. We start at the bottom right of the matrix and move to the top right to align the sequences. When nucleotides are aligned the matrix moves diagonally and horitonally or vertically when there are gaps in a sequence.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def buildDirectional(matrix, rowLength, colLength, gapScore):
  directionalString = ''
  currentRow = rowLength
  currentCol = colLength
  while(currentRow != 0 or currentCol != 0):
      if(currentRow == 0):
          directionalString = directionalString + (('H') * currentCol)
          return directionalString
      elif(currentCol == 0):
          directionalString = directionalString + (('V') * currentRow)
          return directionalString
      elif(matrix[currentRow][currentCol - 1] + 
              int(gapScore) == matrix[currentRow][currentCol]):
          directionalString = directionalString + ('H')
          currentCol = currentCol - 1
      elif(matrix[currentRow - 1][currentCol] + 
              int(gapScore) == matrix[currentRow][currentCol]):
          directionalString = directionalString + ('V')
          currentRow = currentRow - 1
      else:
          directionalString = directionalString + ('D')
          currentRow = currentRow - 1
          currentCol = currentCol - 1
  return directionalString
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To actually create the alignment these next two methods will take the directional string that was created and match the sequences together. The “-“s are just a way to see there is an insertion or deletion in one of the strands. The connector string makes the output a bit easier for us visually to understand how they align.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def buildAlignment(sequenceOne, sequenceTwo, directionalString):
  
  seq1Pos = len(sequenceOne)-1
  seq2Pos = len(sequenceTwo)-1
  dirPos = 0
  alignSeq1 = ''
  alignSeq2 = ''
  while(dirPos &amp;lt; len(directionalString)):
      
      if(directionalString[dirPos] == &quot;D&quot;): 
          alignSeq1 = sequenceOne[seq1Pos] + alignSeq1
          alignSeq2 = sequenceTwo[seq2Pos] + alignSeq2
          seq1Pos = seq1Pos - 1
          seq2Pos = seq2Pos - 1
      elif(directionalString[dirPos] == &quot;V&quot;):
          alignSeq1 = sequenceOne[seq1Pos] + alignSeq1
          alignSeq2 = '-' + alignSeq2
          seq1Pos = seq1Pos - 1
      else:
          alignSeq1 = '-' + alignSeq1 
          alignSeq2 = sequenceTwo[seq2Pos] + alignSeq2
          seq2Pos = seq2Pos -1
      dirPos = dirPos + 1
  alSeq1List = list(alignSeq1)
  alSeq2List = list(alignSeq2)

  connectors, alignmentScore = createConnections(alSeq1List, alSeq2List)

  return alignSeq1, alignSeq2, connectors, alignmentScore

def createConnections(alSeq1List, alSeq2List):

  connectors = &quot;&quot;
  alignmentScore = 0
  for char1, char2 in zip(alSeq1List, alSeq2List):
      if char1 == char2:
          connectors = connectors + &quot;|&quot;
          alignmentScore = alignmentScore + 1

      else:
          if char1 == &quot;-&quot; or char2 == &quot;-&quot;:
              connectors = connectors + &quot; &quot;
          else:
              connectors = connectors + &quot;.&quot;

  return connectors, alignmentScore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In my full project on github I have two other ways to align the sequences (locally and semi-globally). This last method just prints out the sequences nicely.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def printAlignment(alignSeq1, alignSeq2, connectors):
  line = 0
  nucleotideCount = 1
  charPerLine = 50
  for line in range(line,len(alignSeq1),charPerLine):
      print(str(nucleotideCount) + &quot; &quot; + 
        alignSeq1[line:line + charPerLine])
      print(len(str(nucleotideCount)) + &quot; &quot; + &quot; &quot; + 
          connectors[line:line + charPerLine])
      print(str(nucleotideCount) + &quot; &quot; + 
        alignSeq2[line:line + charPerLine])
      nucleotideCount = nucleotideCount + charPerLine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 19 Feb 2016 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/2016/02/19/NeedlemanWunsch.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/02/19/NeedlemanWunsch.html</guid>
        
        
      </item>
    
      <item>
        <title>Aligning DNA</title>
        <description>&lt;p&gt;This first program is here to show how easy it is to start learning about bioinformatics using python. This program
quickly anaylzes two strings or DNA strands to see how similar they are. This even includes a few additional features
for alignment style and direction. This does not however take into account all of the factors that a real DNA strand will encounter.
I started with a simple method to read in a &lt;a href=&quot;https://en.wikipedia.org/wiki/FASTA_format&quot;&gt;FASTA&lt;/a&gt; formatted file. This is used in most of my programs since FASTA files are a standard.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def readInFile(infile): \n
    sequence = &quot;&quot; 
    infile.readline()  # bypass &amp;gt; header line
    for line in infile:
        line = line.replace('\n', '')
        sequence = sequence + line
        sequence = sequence.upper()
    infile.close()
    return sequence
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This next method comapres two sequences with the same length. This is a rather crude way to compare DNA sequences but to start to learn how to use python in biology this works.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def comparison(seq1,seq2):
        
    counterComp = 0 

    for iterator in range(0,len(seq1)):
        #find matching nucleotides and add total 
        if(seq1[iterator] == seq2[iterator]):
             counterComp += 1
    if(counterComp == 0):
        print (&quot;no mismatches found - sequences are identical&quot;)
    else:        
        print(seq1)
        print(seq2)
        print(&quot;Sequences are identical length with &quot; + str(counterComp) 
            + &quot; matches out of &quot; + str(len(seq1)) + &quot; nucleotides&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can now input a FASTA file and compare sequences with this method. What happens if we have sequences of different lengths? We can use this method below to try and predict where the sequences might line up.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def comparisonUnequal(seq1,seq2):
    difference = 0
    deletion =''

    bestFit = list('')
    counter = 0
    if(len(seq1) &amp;lt; len(seq2)):
        seq1, seq2 = switchSequences(seq1,seq2)

    difference = len(seq1) - len(seq2)
    shortSeq = len(seq2)

    #create spaces for deletion
    for i in range(0,difference):
        deletion = deletion + '-'   

    #iterate through sequence moving deletion down each nucleotide
    for iterator in range(0,shortSeq+1):
        counter = 0 #resets counter to 0
        newSeq2 = seq2[0:iterator] + deletion + seq2[iterator:shortSeq] 
        #count number of matching nucleotides put in list
        for i in range(0,shortSeq+1):
            if seq1[i] == newSeq2[i]:
                counter = int(counter)+ 1
        bestFit.append(int(counter))
    print(&quot;The best matching sequence is...&quot;)
    print(seq1)
    print(seq2[0:bestFit.index(max(bestFit))] + deletion + 
        seq2[bestFit.index(max(bestFit)):shortSeq])
    print(&quot;There are &quot; + str(max(bestFit)) + &quot; matching nucleotides&quot;)
    print(&quot;A deletion of &quot; + str(difference) + 
        &quot; nucleotide(s) occurred at nucleotide(s) &quot; 
        + str(bestFit.index(max(bestFit))+1) + &quot;-&quot;+ 
        str(bestFit.index(max(bestFit))+difference))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I also added in a method to ensure that I knew which DNA strand was longer. This helps me ensure i have a positive number when determining how many nucleotides are missing or inserted between the two sequences.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  def switchSequences(seq1,seq2):
      temp = seq1
      seq1 = seq2
      seq2 = temp
      return seq1, seq2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 19 Feb 2016 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/2016/02/19/MatchingSequences.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/02/19/MatchingSequences.html</guid>
        
        
      </item>
    
  </channel>
</rss>
